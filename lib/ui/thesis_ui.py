# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\ashdi\Documents\Thesis\THESIS.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import threading
import os
from PyQt5 import QtCore, QtGui, QtWidgets, uic
from PyQt5.QtWidgets import (QApplication, QFileDialog, QHBoxLayout, QLabel,
        QPushButton, QSizePolicy, QSlider, QStyle, QVBoxLayout, QWidget,
        QMainWindow, QAction, QListWidgetItem)
from PyQt5.QtCore import QDir, Qt, QUrl
from PyQt5.QtGui import QMovie, QPixmap
from PyQt5.QtMultimedia import QMediaContent, QMediaPlayer
from PyQt5.QtMultimediaWidgets import QVideoWidget
import time
from lib.state.state import *
from rpi_backlight import Backlight, BoardType

# Constants
PATH_DIR = os.getcwd(); 

class ThesisGUI(QtWidgets.QMainWindow):
    def __init__(self, from_database_queue, to_database_queue): 
        super(ThesisGUI, self).__init__()
        uic.loadUi(f'{os.getcwd()}/lib/ui/thesis.ui', self)
        self.show()

        # Create a thread to read from from_database_queue.
        self.to_database_queue = to_database_queue
  
        self.from_database_queue = from_database_queue        
        threading.Thread(target=self.read_queue, daemon = True).start()
        
        self.state = State.LEARN
        self.test_set = None
        self.counter = 0

        self.init_home_gui()
        self.init_video_player()
        self.init_image_ui()
        self.init_card_ui()
        self.init_quiz_ui()
        self.init_word_ui()


    def init_home_gui(self): 
        self.tabWidget.currentChanged.connect(self.onChange)

        self.home.setStyleSheet("background-image: url(lib/ui/external_media/background.png);")
        self.tabWidget.setStyleSheet('QTabBar { font-size: 20pt;}')
        self.title_label.setStyleSheet("color: #371D10;")
        self.title_label.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        
        self.title_label_2.setStyleSheet("color: #371D10;")
        self.title_label_2.setAttribute(QtCore.Qt.WA_TranslucentBackground)

        self.loading_label.setHidden(False)        
        self.loading_label.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.gif_loading = QMovie('lib/ui/external_media/magnify.gif')
        self.loading_label.setMovie(self.gif_loading)
        self.gif_loading.start()


    def init_video_player(self): 
        self.videoPlayer.setStyleSheet("background-color: #FFFDF0;")

        self.mediaPlayer = QMediaPlayer(None, QMediaPlayer.VideoSurface)      
        videoWidget = QVideoWidget()

        layout = QVBoxLayout()
        layout.addWidget(videoWidget)
 
        # Set widget to contain window contents
        self.videoWidget.setLayout(layout)
  
        self.mediaPlayer.setVideoOutput(videoWidget)
        self.mediaPlayer.stateChanged.connect(self.mediaStateChanged)
        # self.mediaPlayer.setMedia(QMediaContent(QUrl.fromLocalFile(
        #     PATH_DIR + "/media/demo.mp4")))


    def init_image_ui(self): 
        self.image.setStyleSheet("background-color: #FFFDF0;") #cbbeb5


    def init_card_ui(self):
        self.card.setStyleSheet("background-color: #FFFDF0;") # "background-image: url(media/confetti.png);")
        self.infoList.setStyleSheet("background-color: white;")


    def init_quiz_ui(self): 
        self.quiz.setStyleSheet("background-color: #FFFDF0;") #cbbeb5
        self.next_button.setStyleSheet("background-color: #F5F5F5;")
        self.set_default_colour()
        self.question_label.setStyleSheet("background-color: #FFFFFF;")

        self.next_button.clicked.connect(self.next_question)
        self.option_1.clicked.connect(self.option_selected)
        self.option_2.clicked.connect(self.option_selected)
        self.option_3.clicked.connect(self.option_selected)

        self.correct = QMediaPlayer()
        self.correct.setMedia(QMediaContent(QUrl.fromLocalFile(PATH_DIR + "/lib/ui/external_media/correct.mp3")))

        self.incorrect = QMediaPlayer()
        self.incorrect.setMedia(QMediaContent(QUrl.fromLocalFile(PATH_DIR + "/lib/ui/external_media/incorrect.mp3")))


    def init_word_ui(self): 
        self.words.setStyleSheet("background-color: #FFFDF0;") #cbbeb5
        self.word_input.setStyleSheet("background-color: #FFFFFF;")
        self.clear_button.setStyleSheet("background-color: #F5F5F5;")

        self.clear_button.clicked.connect(self.clear_question)
        

    def onChange(self, tabIndex):  
        if tabIndex == 4 and self.state != State.TEST: # if the state changed to TEST
            self.state = State.TEST
            self.set_default_colour()
            self.to_database_queue.put(State.TEST)
        elif tabIndex == 5 and self.state != State.WORD_WIZARD: # if the state changed to TEST
            self.state = State.WORD_WIZARD
            self.to_database_queue.put(State.WORD_WIZARD)
        elif self.state != State.LEARN: # if the state changed to LEARN
            self.state = State.LEARN 
            self.to_database_queue.put(State.LEARN)


        # if user clicks video widget, play video automatically, otherwise stop. 
        if tabIndex == 1: 
            self.mediaPlayer.play()
        else: 
            self.mediaPlayer.stop()


    def mediaStateChanged(self, state):
        if self.mediaPlayer.state() == QMediaPlayer.StoppedState and \
            self.tabWidget.currentIndex() == 1:

            self.tabWidget.setCurrentIndex(2)


    def next_question(self): 
        self.counter = (self.counter + 1) % len(self.test_set)
        self.question_label.setText(self.test_set[self.counter][0])
        self.option_1.setText(self.test_set[self.counter][1])
        self.option_2.setText(self.test_set[self.counter][2])
        self.option_3.setText(self.test_set[self.counter][3])
        self.set_default_colour()


    def clear_question(self): 
        self.word_input.setText("")


    def option_selected(self): 
        name = self.sender().objectName()
        ind = int(name.split("_")[-1])

        if ind == self.test_set[self.counter][4]: 
            self.correct.play()
            self.set_button_green(ind)
        else: 
            self.incorrect.play()
            self.set_button_red(ind)


    def set_default_colour(self): 
        self.option_1.setStyleSheet("background-color: #F5F5F5;")
        self.option_2.setStyleSheet("background-color: #F5F5F5;")
        self.option_3.setStyleSheet("background-color: #F5F5F5;")        


    def set_button_green(self, ind): 
        if ind == 1: 
            self.option_1.setStyleSheet("background-color: #90EE90;")
        elif ind == 2: 
            self.option_2.setStyleSheet("background-color: #90EE90;")
        elif ind == 3:
            self.option_3.setStyleSheet("background-color: #90EE90;")


    def set_button_red(self, ind): 
        if ind == 1: 
            self.option_1.setStyleSheet("background-color: #FF3333;")
        elif ind == 2: 
            self.option_2.setStyleSheet("background-color: #FF3333;")
        elif ind == 3:
            self.option_3.setStyleSheet("background-color: #FF3333;")


    def read_queue(self): 
        backlight = Backlight("/sys/class/backlight/1-0045/", BoardType.RASPBERRY_PI)

        while True: 

            packet = self.from_database_queue.get() # [column, uid, char, english, folder, video, image]
            if self.state == State.LEARN:
                file_structure = "/database/" + packet[4] + "/" if packet[0] != -1 else "/lib/ui/_error/" + packet[4] + "/"
                
                self.mediaPlayer.setMedia(QMediaContent(QUrl.fromLocalFile(
                    PATH_DIR + file_structure + packet[5])))
                
                # Set video
                pixmap = QPixmap(PATH_DIR + file_structure + packet[6])
                smaller_pixmap = pixmap.scaled(850, 850, Qt.KeepAspectRatio, 
                                            Qt.FastTransformation)
                # Set image
                self.imageWidget.setPixmap(smaller_pixmap)    

                # Log tag                                         
                listWidgetItem = QListWidgetItem(f"{time.asctime()}, COLUMN:{packet[0]}, UID:{packet[1]}, CARD:{packet[2]}, ENGLISH:{packet[3]}, FOLDER NAME:{packet[4]}, VIDEO:{packet[5]}, IMAGE:{packet[6]}")
                self.infoList.addItem(listWidgetItem)   

                self.tabWidget.setCurrentIndex(1)
            elif self.state == State.TEST:  
                self.test_set = packet
                self.question_label.setText(packet[self.counter][0])
                self.option_1.setText(packet[self.counter][1])
                self.option_2.setText(packet[self.counter][2])
                self.option_3.setText(packet[self.counter][3])
            elif self.state == State.WORD_WIZARD: 
                curr_text = self.word_input.text()
                self.word_input.setText(curr_text + packet[2])
                