# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\ashdi\Documents\Thesis\THESIS.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import threading
import os
from PyQt5 import QtCore, QtGui, QtWidgets, uic
from PyQt5.QtWidgets import (QApplication, QFileDialog, QHBoxLayout, QLabel,
        QPushButton, QSizePolicy, QSlider, QStyle, QVBoxLayout, QWidget,
        QMainWindow, QAction, QListWidgetItem)
from PyQt5.QtCore import QDir, Qt, QUrl
from PyQt5.QtGui import QMovie, QPixmap
from PyQt5.QtMultimedia import QMediaContent, QMediaPlayer
from PyQt5.QtMultimediaWidgets import QVideoWidget
import time

# Constants
PATH_DIR = os.getcwd(); 

class ThesisGUI(QtWidgets.QMainWindow):
    def __init__(self, queue): 
        super(ThesisGUI, self).__init__()
        uic.loadUi(f'{os.getcwd()}/lib/ui/thesis.ui', self)
        self.show()

        # Create a thread to read from queue. 
        self.queue = queue
        threading.Thread(target=self.read_queue, daemon = True).start()

        self.init_home_gui()
        self.init_video_player()
        self.init_image_ui()
        self.init_card_ui()


    def init_home_gui(self): 
        self.tabWidget.currentChanged.connect(self.onChange)

        self.home.setStyleSheet("background-image: url(lib/ui/confetti.png);")
        self.tabWidget.setStyleSheet('QTabBar { font-size: 20pt;}')
        self.title_label.setStyleSheet("color: #371D10;")
        self.title_label.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        
        self.title_label_2.setStyleSheet("color: #371D10;")
        self.title_label_2.setAttribute(QtCore.Qt.WA_TranslucentBackground)

        self.loading_label.setHidden(False)
        self.gif_loading = QMovie('lib/ui/magnify.gif')
        self.loading_label.setMovie(self.gif_loading)
        self.gif_loading.start()


    def init_video_player(self): 
        self.videoPlayer.setStyleSheet("background-color: #FFFDF0;")

        self.mediaPlayer = QMediaPlayer(None, QMediaPlayer.VideoSurface)      
        videoWidget = QVideoWidget()

        layout = QVBoxLayout()
        layout.addWidget(videoWidget)
 
        # Set widget to contain window contents
        self.videoWidget.setLayout(layout)
  
        self.mediaPlayer.setVideoOutput(videoWidget)
        self.mediaPlayer.stateChanged.connect(self.mediaStateChanged)
        # self.mediaPlayer.setMedia(QMediaContent(QUrl.fromLocalFile(
        #     PATH_DIR + "/media/demo.mp4")))


    def init_image_ui(self): 
        self.image.setStyleSheet("background-color: #FFFDF0;") #cbbeb5


    def onChange(self, tabIndex):   
        if tabIndex == 1: 
            self.mediaPlayer.play()
        else: 
            self.mediaPlayer.stop()

        print(tabIndex)


    def mediaStateChanged(self, state):
        if self.mediaPlayer.state() == QMediaPlayer.StoppedState: 
            self.tabWidget.setCurrentIndex(2)


    def init_card_ui(self):
        self.card.setStyleSheet("background-color: #FFFDF0;") # "background-image: url(media/confetti.png);")
        self.infoList.setStyleSheet("background-color: white;")


    def read_queue(self): 
        while True: 
            
            card_info = self.queue.get()
            
            file_structure_v = "/database/videos/" if card_info[0] != -1 else "/database/error_videos/"
            file_structure_i = "/database/images/" if card_info[0] != -1 else "/database/error_images/"
            
            self.mediaPlayer.setMedia(QMediaContent(QUrl.fromLocalFile(
                PATH_DIR + file_structure_v + card_info[3])))
            
            # Set video
            pixmap = QPixmap(PATH_DIR + file_structure_i + card_info[4])
            smaller_pixmap = pixmap.scaled(850, 850, Qt.KeepAspectRatio, 
                                        Qt.FastTransformation)
            # Set image
            self.imageWidget.setPixmap(smaller_pixmap)    

            # Log tag                                         
            listWidgetItem = QListWidgetItem(f"{time.asctime()}, COLUMN:{card_info[0]}, UID:{card_info[1]}, CARD:{card_info[2]}, VIDEO:{card_info[3]}, IMAGE:{card_info[4]}")
            self.infoList.addItem(listWidgetItem)   

            self.tabWidget.setCurrentIndex(1)
